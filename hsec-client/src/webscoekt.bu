import { useState, useEffect, useRef } from "react";

const App = () => {
    const [messages, setMessages] = useState([]);
    const [connectionStatus, setConnectionStatus] = useState("Initializing...");
    const [inputMessage, setInputMessage] = useState("");
    const [serverUrl, setServerUrl] = useState("ws://localhost:8000");
    const [isConnected, setIsConnected] = useState(false);
    const socketRef = useRef(null);
    const reconnectTimerRef = useRef(null);

    const connectWebSocket = () => {
        // Clear any existing connection or timers
        if (socketRef.current) {
            socketRef.current.close();
        }
        if (reconnectTimerRef.current) {
            clearTimeout(reconnectTimerRef.current);
        }

        setConnectionStatus("Connecting...");
        console.log(`Attempting to connect to ${serverUrl}`);

        try {
            const ws = new WebSocket(serverUrl);

            ws.onopen = () => {
                console.log("WebSocket connection established");
                setConnectionStatus("Connected");
                setIsConnected(true);
                ws.send("Hello Server!");
            };

            ws.onmessage = (event) => {
                console.log("Message from server:", event.data);
                setMessages((prev) => [...prev, event.data]);
            };

            ws.onerror = (err) => {
                console.error("WebSocket error:", err);
                setConnectionStatus("Connection error - check console");
            };

            ws.onclose = (event) => {
                console.log("WebSocket connection closed", event);
                setConnectionStatus(`Disconnected (code: ${event.code})`);
                setIsConnected(false);

                // Attempt to reconnect after 5 seconds
                reconnectTimerRef.current = setTimeout(() => {
                    setConnectionStatus("Attempting to reconnect...");
                    connectWebSocket();
                }, 5000);
            };

            socketRef.current = ws;
        } catch (error) {
            console.error("Failed to create WebSocket:", error);
            setConnectionStatus(`Connection failed: ${error.message}`);
            setIsConnected(false);
        }
    };

    useEffect(() => {
        connectWebSocket();

        return () => {
            if (socketRef.current) {
                socketRef.current.close();
            }
            if (reconnectTimerRef.current) {
                clearTimeout(reconnectTimerRef.current);
            }
        };
    }, [serverUrl]);

    const sendMessage = () => {
        if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN && inputMessage) {
            socketRef.current.send(inputMessage);
            setMessages((prev) => [...prev, `You: ${inputMessage}`]);
            setInputMessage("");
        } else if (!isConnected) {
            alert("Not connected to server!");
        }
    };

    const handleServerUrlChange = (e) => {
        setServerUrl(e.target.value);
    };

    const handleReconnect = () => {
        connectWebSocket();
    };

    return (
        <div className="p-6 max-w-md mx-auto bg-white rounded-xl shadow-md">
            <h1 className="text-xl font-bold mb-4">WebSocket Demo</h1>

            <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">Server URL</label>
                <div className="flex">
                    <input type="text" value={serverUrl} onChange={handleServerUrlChange} className="flex-grow p-2 border rounded-l" />
                    <button onClick={handleReconnect} className="px-4 py-2 bg-blue-500 text-white rounded-r hover:bg-blue-600">
                        Connect
                    </button>
                </div>
            </div>

            <div className="mb-4">
                <span className="font-bold">Status:</span>
                <span className={`ml-2 ${isConnected ? "text-green-600" : "text-red-600"}`}>{connectionStatus}</span>
            </div>

            <div className="mb-4">
                <input
                    type="text"
                    value={inputMessage}
                    onChange={(e) => setInputMessage(e.target.value)}
                    onKeyPress={(e) => e.key === "Enter" && sendMessage()}
                    placeholder="Type a message..."
                    className="w-full p-2 border rounded"
                    disabled={!isConnected}
                />
                <button
                    onClick={sendMessage}
                    className={`mt-2 px-4 py-2 rounded ${
                        isConnected ? "bg-blue-500 text-white hover:bg-blue-600" : "bg-gray-300 text-gray-500 cursor-not-allowed"
                    }`}
                    disabled={!isConnected}
                >
                    Send
                </button>
            </div>

            <div className="border rounded p-4 h-64 overflow-auto">
                <h2 className="font-bold mb-2">Messages:</h2>
                {messages.length === 0 ? (
                    <p className="text-gray-500">No messages yet</p>
                ) : (
                    <ul>
                        {messages.map((msg, index) => (
                            <li key={index} className="mb-1">
                                {msg}
                            </li>
                        ))}
                    </ul>
                )}
            </div>
        </div>
    );
};

export default App;
